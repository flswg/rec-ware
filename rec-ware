-- Configurations
local aimAssist = {
    radius = 250, -- POV circle radius (in pixels)
    keyToggle = Enum.KeyCode.E, -- Toggle key for aim assist
    pingThreshold = 999, -- Maximum ping for functionality
    bodyParts = {"Head", "UpperTorso"}, -- Initial body parts
    knockCheck = true, -- Enable knock check
    wallCheck = false, -- Enable wall check
    smoothSpeed = 0.38, -- Adjust speed for smoother tracking
}

-- Services
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")
local localPlayer = players.LocalPlayer
local camera = workspace.CurrentCamera

-- Variables
local aimEnabled = false
local currentTarget = nil
local povCircleGui = nil
local currentBodyPart = "HumanoidRootPart" -- Default target body part

-- Ping Calculation
local function getPing()
    local stats = game:GetService("Stats")
    local networkStats = stats.Network
    return networkStats.ServerStatsItem["Data Ping"]:GetValue()
end

local function PingSets()
    local ping = getPing()
    return ping <= aimAssist.pingThreshold
end

-- Utility Functions
local function isPlayerValid(target)
    if not target or target == localPlayer then return false end
    if aimAssist.knockCheck and target.Character:FindFirstChild("KnockedOut") and target.Character.KnockedOut.Value then
        return false
    end
    if aimAssist.wallCheck and target.Character and target.Character.PrimaryPart then
        local ray = Ray.new(camera.CFrame.Position, (target.Character.PrimaryPart.Position - camera.CFrame.Position).unit * 500)
        local hit = workspace:FindPartOnRayWithIgnoreList(ray, {localPlayer.Character})
        if hit and not hit:IsDescendantOf(target.Character) then return false end
    end
    return true
end

local function getClosestTargetInPOV()
    local closest, shortestDistance = nil, aimAssist.radius
    for _, player in pairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character.PrimaryPart and isPlayerValid(player) then
            local screenPoint = camera:WorldToViewportPoint(player.Character.PrimaryPart.Position)
            local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)).Magnitude
            if distance < shortestDistance and screenPoint.Z > 0 then
                shortestDistance = distance
                closest = player
            end
        end
    end
    return closest
end

-- Add POV Circle to Screen
local function addPOVCircle()
    if povCircleGui then return end

    povCircleGui = Instance.new("ScreenGui", localPlayer.PlayerGui)
    povCircleGui.Name = "POVCircleGui"

    local povCircle = Instance.new("Frame", povCircleGui)
    povCircle.Name = "POVCircle"
    povCircle.AnchorPoint = Vector2.new(0.5, 0.5)
    povCircle.Size = UDim2.new(0, aimAssist.radius * 2, 0, aimAssist.radius * 2)
    povCircle.Position = UDim2.new(0.5, 0, 0.5, 0)
    povCircle.BackgroundColor3 = Color3.new(1, 0, 0)
    povCircle.BackgroundTransparency = 1
    povCircle.BorderSizePixel = 0
    povCircle.ZIndex = 10
    povCircle.Parent = povCircleGui
end

-- Check if Target is Jumping
local function isTargetJumping(target)
    if target.Character and target.Character:FindFirstChild("Humanoid") then
        return target.Character.Humanoid:GetState() == Enum.HumanoidStateType.Jumping
    end
    return false
end

-- Create Toggle Button
local function CreateToggleButton()
    if localPlayer:FindFirstChild("PlayerGui"):FindFirstChild("AimbotToggleGui") then
        localPlayer.PlayerGui.AimbotToggleGui:Destroy()
    end

    local ScreenGui = Instance.new("ScreenGui")
    local ToggleButton = Instance.new("ImageButton")

    ScreenGui.Name = "AimbotToggleGui"
    ScreenGui.Parent = localPlayer:WaitForChild("PlayerGui")

    ToggleButton.Name = "AimbotToggleButton"
    ToggleButton.Size = UDim2.new(0, 90, 0, 90)
    ToggleButton.Position = UDim2.new(0.5, -50, 0.8, -50)
    ToggleButton.Image = "rbxassetid://117453955872034" -- Default inactive image
    ToggleButton.BackgroundTransparency = 1
    ToggleButton.Parent = ScreenGui

    -- Button Logic
    ToggleButton.MouseButton1Click:Connect(function()
        aimEnabled = not aimEnabled
        if aimEnabled then
            ToggleButton.Image = "rbxassetid://85708232431152" -- Active image
            addPOVCircle() -- Add POV Circle when enabled
            currentTarget = getClosestTargetInPOV()
        else
            ToggleButton.Image = "rbxassetid://117453955872034" -- Inactive image
            if povCircleGui then 
                povCircleGui:Destroy()
                povCircleGui = nil
            end
            currentTarget = nil
        end
    end)
end

-- Key Input Logic
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == aimAssist.keyToggle then
        aimEnabled = not aimEnabled
        if aimEnabled then
            addPOVCircle()
            currentTarget = getClosestTargetInPOV()
        else
            if povCircleGui then povCircleGui:Destroy() povCircleGui = nil end
            currentTarget = nil
        end
    end
end)

-- Aim Assist Logic
runService.RenderStepped:Connect(function()
    if not aimEnabled or not PingSets() or not currentTarget then return end
    if currentTarget.Character then
        -- Update body part if target is jumping
        if isTargetJumping(currentTarget) then
            currentBodyPart = "Head"
        else
            currentBodyPart = "HumanoidRootPart"
        end

        -- Aim at the appropriate body part
        local part = currentTarget.Character:FindFirstChild(currentBodyPart)
        if part then
            local targetPosition = (part.Position - camera.CFrame.Position).unit
            local smoothedPosition = camera.CFrame.LookVector:Lerp(targetPosition, aimAssist.smoothSpeed)
            camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + smoothedPosition)
        end
    else
        currentTarget = getClosestTargetInPOV()
    end
end)

-- Ensure Button Reappears After Reset
localPlayer.CharacterAdded:Connect(function()
    CreateToggleButton()
end)

-- Initialize Toggle Button
CreateToggleButton()
